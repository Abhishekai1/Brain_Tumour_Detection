import gradio as gr
import numpy as np
import cv2
import tensorflow as tf
from PIL import Image

# ðŸ”¹ Load the trained model
model_path = "/content/drive/MyDrive/bin2/brain_tumor_model(h5).h5"
model = tf.keras.models.load_model(model_path)

# ðŸ”¹ Define image preprocessing function
def preprocess_image(image):
    image = image.convert("RGB")  # Ensure 3 channels
    image = np.array(image)  # Convert to numpy array
    image = cv2.resize(image, (128, 128))  # Resize to model input shape
    image = image / 255.0  # Normalize
    image = np.expand_dims(image, axis=0)  # Add batch dimension
    return image

# ðŸ”¹ Define prediction function
def predict(image):
    processed_img = preprocess_image(image)
    prediction = model.predict(processed_img)  # Get model output

    # Handle different output formats
    if prediction.shape[-1] == 1:  # Binary classification (0 or 1 output)
        tumor_probability = float(prediction[0][0])
        result = "Tumor Detected" if tumor_probability > 0.5 else "No Tumor"
        confidence = f"Confidence: {tumor_probability:.2%}"
    else:  # Multi-class classification (e.g., softmax output)
        predicted_class = np.argmax(prediction, axis=1)[0]
        tumor_probability = max(prediction[0])
        result = "Tumor Detected" if predicted_class == 1 else "No Tumor"
        confidence = f"Confidence: {tumor_probability:.2%}"

    return f"{result} ({confidence})"

# ðŸ”¹ Create Gradio interface
interface = gr.Interface(
    fn=predict,
    inputs=gr.Image(type="pil"),  # Accepts image input
    outputs="text",  # Display text output
    title="Brain Tumor Detection",
    description="Upload an MRI image to check for a brain tumor."
)

# ðŸ”¹ Launch the web app
if __name__ == "__main__":
    interface.launch()
